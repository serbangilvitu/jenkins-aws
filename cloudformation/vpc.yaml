AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Creates a VPC with public and private subnets


Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: General
        Parameters:
          - SolutionName
      - Label:
          default: Network
        Parameters:
          - VPCCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnet3CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PrivateSubnet3CIDR

Parameters:
  SolutionName:
    Type: String
    Default: 'demo'

  VPCCIDR:
    Type: String
    Default: '10.0.0.0/16'

  PublicSubnet1CIDR:
    Type: String
    Default: '10.0.32.0/20'

  PublicSubnet2CIDR:
    Type: String
    Default: '10.0.96.0/20'

  PublicSubnet3CIDR:
    Type: String
    Default: '10.0.160.0/20'

  PrivateSubnet1CIDR:
    Type: String
    Default: '10.0.0.0/19'

  PrivateSubnet2CIDR:
    Type: String
    Default: '10.0.64.0/19'

  PrivateSubnet3CIDR:
    Type: String
    Default: '10.0.128.0/19'


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${SolutionName}'
        - Key: SolutionName
          Value: !Sub '${SolutionName}'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${SolutionName}'
        - Key: SolutionName
          Value: !Sub '${SolutionName}'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC


  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${SolutionName}-public-1'
        - Key: SolutionName
          Value: !Sub '${SolutionName}'
        - Key: Type
          Value: 'public'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${SolutionName}-public-2'
        - Key: SolutionName
          Value: !Sub '${SolutionName}'
        - Key: Type
          Value: 'public'

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${SolutionName}-public-3'
        - Key: SolutionName
          Value: !Sub '${SolutionName}'
        - Key: Type
          Value: 'public'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${SolutionName}-private-1'
        - Key: SolutionName
          Value: !Sub '${SolutionName}'
        - Key: Type
          Value: 'private'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${SolutionName}-private-2'
        - Key: SolutionName
          Value: !Sub '${SolutionName}'
        - Key: Type
          Value: 'private'

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${SolutionName}-private-3'
        - Key: SolutionName
          Value: !Sub '${SolutionName}'
        - Key: Type
          Value: 'private'

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${SolutionName}-ngw-1'
        - Key: SolutionName
          Value: !Sub '${SolutionName}'

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${SolutionName}-ngw-1'
        - Key: SolutionName
          Value: !Sub '${SolutionName}'

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${SolutionName}-ngw-2'
        - Key: SolutionName
          Value: !Sub '${SolutionName}'

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${SolutionName}-ngw-2'
        - Key: SolutionName
          Value: !Sub '${SolutionName}'

  NatGateway3EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${SolutionName}-ngw-3'
        - Key: SolutionName
          Value: !Sub '${SolutionName}'

  NatGateway3:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway3EIP.AllocationId
      SubnetId: !Ref PublicSubnet3
      Tags:
        - Key: Name
          Value: !Sub '${SolutionName}-ngw-3'
        - Key: SolutionName
          Value: !Sub '${SolutionName}'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${SolutionName}-public'
        - Key: SolutionName
          Value: !Sub '${SolutionName}'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${SolutionName}-private-1'
        - Key: SolutionName
          Value: !Sub '${SolutionName}'

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${SolutionName}-private-2'
        - Key: SolutionName
          Value: !Sub '${SolutionName}'

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${SolutionName}-private-3'
        - Key: SolutionName
          Value: !Sub '${SolutionName}'

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  DefaultPrivateRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway3

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3

Outputs:
  VPC:
    Description: Created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub '${SolutionName}-vpc'

  VPCCIDR:
    Description: Created VPC
    Value: !Ref VPCCIDR
    Export:
      Name: !Sub '${SolutionName}-vpc-cidr'

  PublicSubnet1:
    Description: Public subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${SolutionName}-public-subnet-1'

  PublicSubnet2:
    Description: Public subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub '${SolutionName}-public-subnet-2'

  PublicSubnet3:
    Description: Public subnet 3
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub '${SolutionName}-public-subnet-3'

  PrivateSubnet1:
    Description: Private subnet 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${SolutionName}-private-subnet-1'

  PrivateSubnet2:
    Description: Private subnet 2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub '${SolutionName}-private-subnet-2'

  PrivateSubnet3:
    Description: Private subnet 3
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub '${SolutionName}-private-subnet-3'

  NatGateway1EIP:
    Description: NAT gateway elastic IP 1
    Value: !Ref NatGateway1EIP

  NatGateway2EIP:
    Description: NAT gateway elastic IP 2
    Value: !Ref NatGateway2EIP
